# Generated from Expr.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,17,126,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,
        9,1,9,1,10,1,10,5,10,62,8,10,10,10,12,10,65,9,10,1,11,4,11,68,8,
        11,11,11,12,11,69,1,12,4,12,73,8,12,11,12,12,12,74,1,12,1,12,4,12,
        79,8,12,11,12,12,12,80,1,13,1,13,5,13,85,8,13,10,13,12,13,88,9,13,
        1,13,1,13,1,14,1,14,1,14,1,14,3,14,96,8,14,1,14,1,14,1,14,1,14,1,
        14,1,14,3,14,104,8,14,5,14,106,8,14,10,14,12,14,109,9,14,1,14,1,
        14,1,15,3,15,114,8,15,1,15,1,15,1,15,1,15,1,16,4,16,121,8,16,11,
        16,12,16,122,1,16,1,16,0,0,17,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,1,0,6,3,0,65,
        90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,2,0,34,34,
        39,39,3,0,10,10,13,13,34,34,2,0,9,9,32,32,137,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,1,35,1,0,0,0,3,37,1,0,0,0,5,39,1,0,0,0,7,41,1,0,0,0,9,43,1,0,
        0,0,11,45,1,0,0,0,13,47,1,0,0,0,15,50,1,0,0,0,17,53,1,0,0,0,19,56,
        1,0,0,0,21,59,1,0,0,0,23,67,1,0,0,0,25,72,1,0,0,0,27,82,1,0,0,0,
        29,91,1,0,0,0,31,113,1,0,0,0,33,120,1,0,0,0,35,36,5,42,0,0,36,2,
        1,0,0,0,37,38,5,47,0,0,38,4,1,0,0,0,39,40,5,37,0,0,40,6,1,0,0,0,
        41,42,5,43,0,0,42,8,1,0,0,0,43,44,5,45,0,0,44,10,1,0,0,0,45,46,5,
        61,0,0,46,12,1,0,0,0,47,48,5,43,0,0,48,49,5,61,0,0,49,14,1,0,0,0,
        50,51,5,45,0,0,51,52,5,61,0,0,52,16,1,0,0,0,53,54,5,42,0,0,54,55,
        5,61,0,0,55,18,1,0,0,0,56,57,5,47,0,0,57,58,5,61,0,0,58,20,1,0,0,
        0,59,63,7,0,0,0,60,62,7,1,0,0,61,60,1,0,0,0,62,65,1,0,0,0,63,61,
        1,0,0,0,63,64,1,0,0,0,64,22,1,0,0,0,65,63,1,0,0,0,66,68,7,2,0,0,
        67,66,1,0,0,0,68,69,1,0,0,0,69,67,1,0,0,0,69,70,1,0,0,0,70,24,1,
        0,0,0,71,73,7,2,0,0,72,71,1,0,0,0,73,74,1,0,0,0,74,72,1,0,0,0,74,
        75,1,0,0,0,75,76,1,0,0,0,76,78,5,46,0,0,77,79,7,2,0,0,78,77,1,0,
        0,0,79,80,1,0,0,0,80,78,1,0,0,0,80,81,1,0,0,0,81,26,1,0,0,0,82,86,
        7,3,0,0,83,85,8,4,0,0,84,83,1,0,0,0,85,88,1,0,0,0,86,84,1,0,0,0,
        86,87,1,0,0,0,87,89,1,0,0,0,88,86,1,0,0,0,89,90,7,3,0,0,90,28,1,
        0,0,0,91,95,5,91,0,0,92,96,3,23,11,0,93,96,3,25,12,0,94,96,3,27,
        13,0,95,92,1,0,0,0,95,93,1,0,0,0,95,94,1,0,0,0,96,107,1,0,0,0,97,
        98,5,44,0,0,98,99,5,32,0,0,99,103,1,0,0,0,100,104,3,23,11,0,101,
        104,3,25,12,0,102,104,3,27,13,0,103,100,1,0,0,0,103,101,1,0,0,0,
        103,102,1,0,0,0,104,106,1,0,0,0,105,97,1,0,0,0,106,109,1,0,0,0,107,
        105,1,0,0,0,107,108,1,0,0,0,108,110,1,0,0,0,109,107,1,0,0,0,110,
        111,5,93,0,0,111,30,1,0,0,0,112,114,5,13,0,0,113,112,1,0,0,0,113,
        114,1,0,0,0,114,115,1,0,0,0,115,116,5,10,0,0,116,117,1,0,0,0,117,
        118,6,15,0,0,118,32,1,0,0,0,119,121,7,5,0,0,120,119,1,0,0,0,121,
        122,1,0,0,0,122,120,1,0,0,0,122,123,1,0,0,0,123,124,1,0,0,0,124,
        125,6,16,0,0,125,34,1,0,0,0,11,0,63,69,74,80,86,95,103,107,113,122,
        1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    ID = 11
    INT = 12
    FLOAT = 13
    STRING = 14
    LIST = 15
    NEWLINE = 16
    WS = 17

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'*'", "'/'", "'%'", "'+'", "'-'", "'='", "'+='", "'-='", "'*='", 
            "'/='" ]

    symbolicNames = [ "<INVALID>",
            "ID", "INT", "FLOAT", "STRING", "LIST", "NEWLINE", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "ID", "INT", "FLOAT", "STRING", 
                  "LIST", "NEWLINE", "WS" ]

    grammarFileName = "Expr.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


